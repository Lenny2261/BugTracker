@model BugTracker.Models.TicketDetailsViewModel

@{
    ViewBag.Title = "Details";
}

<h2>@Html.DisplayFor(model => model.tickets.title)</h2>

<div>
    <h4>Ticket Details</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            Description
        </dt>

        <dd>
            @Html.DisplayFor(model => model.tickets.description)
        </dd>

        <dt>
            Assigned Employee
        </dt>

        <dd>
            @Html.DisplayFor(model => model.tickets.Assigned.firstName) @Html.DisplayFor(model => model.tickets.Assigned.lastName)
        </dd>

        <dt>
            Owner of Ticket
        </dt>

        <dd>
            @Html.DisplayFor(model => model.tickets.Owner.firstName) @Html.DisplayFor(model => model.tickets.Owner.lastName)
        </dd>

        <dt>
            Project
        </dt>

        <dd>
            @Html.DisplayFor(model => model.tickets.Project.name)
        </dd>

        <dt>
            Priority
        </dt>

        <dd>
            @Html.DisplayFor(model => model.tickets.TicketPriority.name)
        </dd>

        <dt>
            Status
        </dt>

        <dd>
            @Html.DisplayFor(model => model.tickets.TicketStatus.name)
        </dd>

        <dt>
            Type
        </dt>

        <dd>
            @Html.DisplayFor(model => model.tickets.TicketType.name)
        </dd>
    </dl>
    <div>
        @{
            var createdBlog = Model.tickets.created.ToString().Split(' ');
            var updatedBlog = Model.tickets.updated.ToString().Split(' ');
        }
        <div style="float: left;"><b>Created:</b> @createdBlog[0] @createdBlog[1] @createdBlog[2]</div>
        @if (Model.tickets.updated != null)
        {
            <div style="float: right;"><b>Updated:</b> @updatedBlog[0] @updatedBlog[1] @updatedBlog[2]</div>
        }
    </div>

    <br />
    <br />
    @if (Model.tickets.AssignedId == Model.user.Id || Model.tickets.OwnerId == Model.user.Id || User.IsInRole("ProjectManager") && Model.tickets.Project.projectUsers.Select(p => p.Id).Contains(Model.user.Id))
    {
        <p>
            @Html.ActionLink("Edit", "Edit", new { id = Model.tickets.Id })
        </p>
    }
    <div class="row">
        @if (Model.tickets.AssignedId == Model.user.Id || Model.tickets.OwnerId == Model.user.Id ||
    User.IsInRole("ProjectManager") && Model.tickets.Project.projectUsers.Select(p => p.Id).Contains(Model.user.Id) || User.IsInRole("Admin"))
        {
            <div class="col-md-6">
                <div class="post-comment" id="testTap">
                    @using (Html.BeginForm("Create", "TicketComments", FormMethod.Post, new { @class = "form-horizontal" }))
                    {
                        @Html.AntiForgeryToken()

                        @Html.Hidden("TicketId", Model.tickets.Id);
                        TempData["assignedId"] = Model.tickets.AssignedId;
                        TempData["Title"] = Model.tickets.title;

                        @Html.Action("Create", "TicketComments")

                        <div class="form-group">
                            <div class="col-md-12 ridOfLeft" style="padding-left: 245px;">
                                <button class="btn btn-dafault btn-dark" type="submit">Comment</button>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="col-md-6">
                @using (Html.BeginForm("Create", "TicketAttachments", FormMethod.Post, new { enctype = "Multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()

                    @Html.Hidden("TicketId", Model.tickets.Id);
                    TempData["assignedId"] = Model.tickets.AssignedId;
                    TempData["Title"] = Model.tickets.title;

                    <div class="form-group">
                        <input name="file" type="file" class="form-control" id="fileUpload" />
                    </div>
                    <br />
                    <div class="form-group">
                        @Html.LabelFor(model => model.tickets.ticketAttachments.FirstOrDefault().description, "Description", htmlAttributes: new { @class = "control-label col-md-2 ridOfLeft" })
                        <div class="col-md-12" style="padding-left: 0px;">
                            @Html.EditorFor(model => model.tickets.ticketAttachments.FirstOrDefault().description, new { htmlAttributes = new { @class = "form-control", @Value = "" } })
                            @Html.ValidationMessageFor(model => model.tickets.ticketAttachments.FirstOrDefault().description, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <br />
                    <div class="form-group">
                        <div class="col-md-12 ridOfLeft" style="padding-left: 165px;">
                            <button class="btn btn-dafault btn-dark" type="submit">Attach File</button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    <br />
    <div class="row">
        <div class="col-md-6">
            @foreach (var item in Model.tickets.ticketComments)
            {
                <div>
                    <img style="height: 25px; width: 25px; float: left; margin-right: 10px;" alt="image" src="@item.User.avatar" />
                    <h5>@item.User.firstName @item.User.lastName</h5>
                </div>
                <div>
                    @item.body
                </div>
                <br />
                <br />
            }
        </div>
        <div class="col-md-6">
            <h5>File Attachments</h5>
            @foreach (var item in Model.ticketAttachments)
            {
                <div>
                    <img style="height: 25px; width: 25px; float: left; margin-right: 10px;" alt="image" src="@item.icon" />
                    <a href="@item.fileURL" download="@item.filePath">Download</a>
                </div>
                <div>
                    @item.description @Html.ActionLink("Delete", "Delete", new { id = item.TicketId })
                </div>
                <br />
            }
        </div>
    </div>

    <div>
        <h5>Changes to Ticket</h5>
        <table class="table">
            <thead>
                <tr>
                    <th>
                        Property Changed
                    </th>
                    <th>
                        Old Value
                    </th>
                    <th>
                        New Value
                    </th>
                    <th>
                        Changed
                    </th>
                    <th>
                        Modifier
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.ticketHistories)
                {
                    <tr>
                        <td>
                            @item.property
                        </td>
                        <td>
                            @item.oldValue
                        </td>
                        <td>
                            @item.newValue
                        </td>
                        @{
                            var changeDate = item.changed.ToString().Split(' ');
                        }
                        <td>
                            @changeDate[0] @changeDate[1] @changeDate[2]
                        </td>
                        <td>
                            @item.User.firstName @item.User.lastName
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @section scripts{

        <script>
            $('.table').DataTable();
        </script>

        <script>
        var check = '@TempData["attachCheck"]';
        if (check == "Success") {
            window.onload = function () {
                swal(
                    'Submitted!',
                    "Your file has been submitted successfully!",
                    'success'
                )
            }
        }
        else if (check == "Failure") {
            swal({
                type: 'error',
                title: 'Oops...',
                text: "Something went wrong! Your file has not been uploaded! Please make sure it's a valid file format. Accepted Formats: (.doc, .docx, .xls, .xlsx, .pdf, .png, and .jpg)",
            })
        }
        </script>
    }
